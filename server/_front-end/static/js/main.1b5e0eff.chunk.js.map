{"version":3,"sources":["serviceWorker.ts","components/Thumbnail/thumnbnail.tsx","config.ts","components/movies/movies.tsx","redux/action-type.ts","components/Reviews/reviews.tsx","redux/store.ts","redux/reducer.ts","redux/app-state.ts","components/Header/Header.tsx","models/review-model.ts","components/Insert/insert.tsx","components/Footer/footer.tsx","components/layout/layout.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Thumbnail","props","mouseEnter","userEntersMe","videoSource","mouseLeave","userLeftMe","className","onMouseEnter","this","onMouseLeave","src","imageSource","alt","Component","YoutubeEmbed","embedId","frameBorder","allow","allowFullScreen","title","Config","serverUrl","_initialize","ActionType","Movies","showPreview","setState","removePreview","state","movies","previewImage","searchField","axios","get","response","data","alert","message","filter","movie","name","toLowerCase","indexOf","map","m","key","movieId","reviewsCount","to","description","Date","date","toLocaleDateString","imageFileName","Fragment","placeholder","onChange","e","target","value","Button","href","type","variant","renderMovieSearch","renderAllMovies","style","display","Reviews","reviews","movieName","params","movie_name","toString","reverse","r","reviewId","Card","Header","profile_pic","user_name","Body","content","dateAdded","store","createStore","oldAppState","action","newAppState","getUser","user","payload","unsubscribeStore","getState","userName","subscribe","withCredentials","dispatch","console","log","Navbar","sticky","bg","Container","Collapse","margin","ReviewModel","userId","Insert","setReview","args","a","reviewContent","review","setMovieId","toLocaleString","split","addReview","errors","nameError","length","post","history","push","moviesResponse","userResponse","user_id","defaultValue","disabled","Form","Group","controlId","Label","Control","as","rows","onClick","Footer","Layout","path","component","exact","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","stylesHeader","join","stylesTopLine","stylesMiddleLines","stylesBottomLine","printToConsole"],"mappings":"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","file":"static/js/main.1b5e0eff.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\r\nimport \"./thumbnail.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst YoutubeEmbed = ({ embedId }) => (\r\n    <div className=\"video-responsive\">\r\n      <iframe \r\n        // width=\"853\"\r\n        // height=\"480\"\r\n        src={`https://www.youtube.com/embed/${embedId}?&autoplay=1`}\r\n        frameBorder=\"0\"\r\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n        allowFullScreen\r\n        title=\"Embedded youtube\"\r\n      />\r\n    </div>\r\n  );\r\n  YoutubeEmbed.propTypes = {\r\n    embedId: PropTypes.string.isRequired\r\n  };\r\n\r\ninterface ThumbnailProps {\r\n    imageSource:string;\r\n    // imageWidth:number;\r\n    // imageHeight:number;\r\n    userEntersMe?(imageSource:string):void;\r\n    userLeftMe?(): void;\r\n    videoSource:string;\r\n}\r\n\r\nexport class Thumbnail extends Component<ThumbnailProps>{\r\n\r\n    public constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    private mouseEnter = () => {\r\n        if(this.props.userEntersMe) {\r\n            this.props.userEntersMe(this.props.videoSource)\r\n        }\r\n    }\r\n\r\n    private mouseLeave = () => {\r\n        if(this.props.userLeftMe){\r\n            this.props.userLeftMe();\r\n        }\r\n    }\r\n\r\n    public render(){\r\n        return(\r\n            <div className=\"thumbnail\" onMouseEnter={this.mouseEnter} onMouseLeave={this.mouseLeave}>\r\n                <img \r\n                src={this.props.imageSource} \r\n                // height={this.props.imageHeight} \r\n                // width={this.props.imageWidth}\r\n                alt={this.props.videoSource}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default YoutubeEmbed;\r\n","export class Config {\r\n    public static serverUrl: string;\r\n\r\n    public static _initialize(){\r\n        if(process.env.NODE_ENV === 'production') {\r\n            Config.serverUrl = \"https://trailer-cinema.herokuapp.com\";\r\n        } \r\n        else {\r\n            Config.serverUrl = \"http://localhost:3000\"\r\n        }\r\n    }\r\n}\r\n\r\nConfig._initialize();","import React, { Component } from \"react\";\r\nimport { MovieModel } from \"../../models/movie-model\";\r\nimport axios from \"axios\";\r\nimport \"./movies.css\";\r\nimport YoutubeEmbed, { Thumbnail } from \"../Thumbnail/thumnbnail\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Config } from \"../../config\";\r\n\r\n\r\ninterface MoviesState {\r\n    movies:  MovieModel[];\r\n    previewImage:string;\r\n    embedId:string;\r\n    searchField:string;\r\n}\r\n\r\nexport class Movies extends Component<any,MoviesState> {\r\n\r\n    public constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            movies: [],\r\n            previewImage:\"\",\r\n            embedId: \"\",\r\n            searchField: \"\"\r\n        };\r\n    }\r\n\r\n    public async componentDidMount(){\r\n            try{\r\n                const response = await axios.get<MovieModel[]>(Config.serverUrl + \"/api/movies\");\r\n                const movies = response.data;\r\n                this.setState({ movies })\r\n            }\r\n            catch(err){\r\n                alert(err.message);\r\n            }\r\n    }\r\n\r\n    private showPreview = (embedId:string) => {\r\n        this.setState({embedId:embedId})\r\n    }\r\n\r\n    private removePreview = () => {\r\n        this.setState({embedId:\"\"});\r\n    }\r\n\r\n    public renderMovieSearch(){\r\n        return this.state.movies.filter(movie => movie.name.toLowerCase().indexOf((this.state.searchField).toLowerCase()) > -1).map(m => {\r\n            return(\r\n                    <tr key={m.movieId}>\r\n                            <td>\r\n                                <p className=\"movie-name\">{m.name}</p>\r\n                            </td>\r\n                            {/* Show review count */}\r\n                            <td>\r\n                                {m.reviewsCount > 0 ? \r\n                                <NavLink to={\"/review/\"+ m.movieId}>\r\n                                    <p className=\"movie-review one\"><span> - {m.reviewsCount} - </span></p>\r\n                                </NavLink> : \r\n                                <p className=\"movie-review one\"><span>  No reviews  </span></p>}\r\n                            </td>\r\n                            <td className=\"movie-description\">{m.description}</td>\r\n                            <td className=\"movie-date\">{new Date(m.date).toLocaleDateString()}</td>\r\n                            <td className=\"movie-image\">\r\n                                <Thumbnail\r\n                                    // imageWidth={105}\r\n                                    // imageHeight={55}\r\n                                    imageSource={Config.serverUrl + \"/assets/images/\" + m.imageFileName}\r\n                                    userEntersMe={this.showPreview}\r\n                                    userLeftMe={this.removePreview} \r\n                                    videoSource={m.embedId}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n    public renderAllMovies(){\r\n            return this.state.movies.map(m => \r\n                        <tr key={m.movieId}>\r\n                            <td>\r\n                            <p className=\"movie-name one\">{m.name}</p>\r\n                            </td>\r\n                            {/* Show review count */}\r\n                            <td>\r\n                                {m.reviewsCount > 0 ? \r\n                                <NavLink to={\"/review/\"+ m.movieId}>\r\n                                    <p className=\"movie-review one\"><span> - {m.reviewsCount} - </span></p>\r\n                                </NavLink> : \r\n                                <p className=\"movie-review one\"><span>  No reviews  </span></p>}\r\n                            </td>\r\n\r\n                            <td className=\"movie-description\">{m.description}</td>\r\n                            <td className=\"movie-date one\" >{new Date(m.date).toLocaleDateString()}</td>\r\n                            <td className=\"movie-image\">\r\n                                <Thumbnail\r\n                                    // imageWidth={105}\r\n                                    // imageHeight={55}\r\n                                    imageSource={Config.serverUrl + \"/assets/images/\" + m.imageFileName}\r\n                                    userEntersMe={this.showPreview}\r\n                                    userLeftMe={this.removePreview} \r\n                                    videoSource={m.embedId}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                )}  \r\n    \r\n    \r\n    public render(){\r\n        return (\r\n            <React.Fragment>\r\n            <div className=\"movies\">\r\n                <div className=\"float-container\">\r\n                    <div className=\"search-container\">\r\n                        <h2 className=\"float-child\">Movies List : </h2>\r\n                        <input className=\"float-child\" placeholder=\"  Search . . .\" onChange={(e) => this.setState({ searchField: e.target.value }) }/>\r\n                    </div>\r\n                    <div className=\"reviewButton-container\">\r\n                        <Button href=\"/review/add-review\" type=\"submit\" variant=\"light\">Add review here</Button>\r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n    \r\n                {/* {this.state.movies.length === 0 && <img src=\"/assets/images/loading.gif\" width=\"200\" alt=\"Loading...\"/> } */}\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Movie name</th>\r\n                            <th>Reviews</th>\r\n                            <th>Description</th>\r\n                            <th>Release Date</th>\r\n                            <th className=\"blinking\">Hover to View</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.searchField !== \"\" ? this.renderMovieSearch() : this.renderAllMovies()}\r\n                    </tbody>\r\n                    \r\n                </table>     \r\n\r\n                <div className=\"preview\" style={{display: this.state.embedId ? \"block\" : \"none\"}}>\r\n                    <YoutubeEmbed embedId={this.state.embedId} ></YoutubeEmbed>\r\n                </div>        \r\n            </div>\r\n            </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n","export enum ActionType {\r\n    getUser,\r\n    logout,\r\n    // addReview\r\n}","import axios from \"axios\";\r\nimport React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { ReviewModel } from \"../../models/review-model\";\r\nimport Card from 'react-bootstrap/Card';\r\nimport \"./reviews.css\";\r\nimport { Config } from \"../../config\";\r\n\r\ninterface ReviewsState {\r\n    reviews : ReviewModel[];\r\n    movieName:string;\r\n}\r\n\r\nexport class Reviews extends Component<any,ReviewsState>{\r\n\r\n    public constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            reviews: [],\r\n            movieName:\"\",\r\n        }\r\n    }\r\n\r\n    public async componentDidMount(){\r\n        try{\r\n            const movieId = this.props.match.params.movieId;\r\n            const response = await axios.get<ReviewModel[]>(Config.serverUrl + \"/review/\" + movieId);\r\n            const reviews = response.data;\r\n            const movieName = reviews[0].movie_name.toString();\r\n            this.setState({reviews, movieName});            \r\n        }\r\n        catch(err){\r\n            alert(err.message);\r\n        }\r\n    }\r\n\r\n    public render(){\r\n        return(\r\n            <React.Fragment>\r\n            <h2>{this.state.movieName} Reviews:</h2> \r\n                \r\n            <div className=\"detail-container\"> \r\n                <NavLink to=\"/\" className=\"hp\"> Back to Homepage</NavLink>\r\n                <br></br>\r\n                {this.state.reviews.reverse().map(r => \r\n                <div key={r.reviewId}>\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <img src={r.profile_pic ? r.profile_pic : \"/assets/images/userImage.jpg\"} alt=\"\"></img>\r\n                            {/* <img src=\"/assets/images/userImage.jpg\" alt=\"\"></img> */}\r\n                            <div className=\"persona\">{r.user_name ?r.user_name : \"anonymous\"}</div>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <blockquote className=\"blockquote mb-0\">\r\n                                {r.content} \r\n                            </blockquote>\r\n                            <footer className=\"blockquote-footer\">\r\n                            <cite title=\"Source Title\">{r.dateAdded}</cite>\r\n                            </footer>\r\n                        </Card.Body>\r\n                    </Card>\r\n                    <p></p>\r\n                </div>\r\n                )}          \r\n            </div>\r\n            </React.Fragment> \r\n        );\r\n    }\r\n}","import { createStore } from \"redux\";\r\nimport { AppState } from \"./app-state\";\r\nimport { reduce } from \"./reducer\";\r\n\r\nexport const store = createStore(reduce, new AppState());","import { Action } from \"./action\";\r\nimport { ActionType } from \"./action-type\";\r\nimport { AppState } from \"./app-state\";\r\n\r\nexport function reduce(oldAppState: AppState, action: Action): AppState {\r\n\r\n    const newAppState = {...oldAppState };\r\n\r\n    switch (action.type) {\r\n\r\n        case ActionType.getUser:\r\n            // newAppState.user.push(action.payload);\r\n            newAppState.user = action.payload;\r\n            break;\r\n\r\n        default: break;\r\n    \r\n    }\r\n\r\n    return newAppState;\r\n}\r\n","import { UserModel } from \"../models/user-model\";\r\n\r\nexport class AppState {\r\n    public user : UserModel[];\r\n\r\n    public constructor(){\r\n        this.user = [];\r\n    }\r\n\r\n}","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { UserModel } from \"../../models/user-model\";\r\nimport { store } from \"../../redux/store\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\nimport './header.css';\r\nimport { Config } from \"../../config\";\r\n\r\ninterface HeaderState {\r\n    user: UserModel[];\r\n    userName : string;\r\n}\r\n\r\nexport class Header extends Component<any,HeaderState> {\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props:any){\r\n        super(props);\r\n        this.state = {\r\n            user: store.getState().user,\r\n            userName:\"\",\r\n        }\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const user = store.getState().user;\r\n            this.setState({ user });\r\n        })\r\n        try {  \r\n            const response = await axios.get<UserModel>(Config.serverUrl + \"/auth/current_user\", {withCredentials: true});\r\n            if(response) {\r\n                const user = response.data;\r\n                const userName = user.name;\r\n                this.setState({userName});\r\n                const action = { type: ActionType.getUser, payload: user};\r\n                store.dispatch(action);\r\n            } \r\n        }\r\n        catch (err){\r\n            // alert(\"Error : \" + err.message);\r\n            console.log(\"User is not logged in\");\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount():void {\r\n        this.unsubscribeStore();\r\n    }\r\n\r\n    public render(){\r\n        return(\r\n            <div>\r\n                <Navbar sticky=\"top\" bg=\"light\" variant=\"light\">\r\n                    <Container>\r\n                        <h1 className=\"main-header\">\r\n                            <a href=\"/\">Trailer Cinema</a></h1>\r\n                        <Navbar.Collapse className=\"justify-content-end\">\r\n                            {this.state.user ? <p style={{margin: `10px`}}>Hey {this.state.userName}</p> : null}\r\n                            {!this.state.userName ? <Button href= \"http://localhost:3000/auth/google/\"  variant=\"outline-dark\">Login with google</Button> : null}\r\n                            {this.state.userName ? <Button href=\"http://localhost:3000/auth/logout\" variant=\"outline-dark\">Logout</Button> : null}\r\n                        </Navbar.Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}","export class ReviewModel {\r\n\r\n    public constructor(\r\n        public movie_name?: String,\r\n        public reviewId?: number,\r\n        public movieId?: number,\r\n        public content?: string,\r\n        public dateAdded?: String,\r\n        public userId?: number,\r\n        public user_name?: String,\r\n        public profile_pic?: string\r\n        ) {\r\n\r\n    }\r\n}","import React, { ChangeEvent, Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ReviewModel } from \"../../models/review-model\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { store } from \"../../redux/store\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\nimport { MovieModel } from \"../../models/movie-model\";\r\nimport { UserModel } from \"../../models/user-model\";\r\nimport \"./insert.css\";\r\nimport { Config } from \"../../config\";\r\n\r\ninterface insertState {\r\n    review: ReviewModel,\r\n    movies:  MovieModel[],\r\n    errors: {nameError: String},\r\n    user: UserModel[],\r\n    userId : number\r\n}\r\n\r\nexport class Insert extends Component<any, insertState> {\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props: any){\r\n        super(props);\r\n        this.state = {\r\n            review : new ReviewModel(),\r\n            movies:[],\r\n            errors: {nameError: \"\"},\r\n            user: store.getState().user,\r\n            userId: null,\r\n        };\r\n    }\r\n\r\n    public async componentDidMount(){\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const user = store.getState().user;\r\n            this.setState({ user });\r\n        });\r\n\r\n        try {\r\n            //Getting all movies\r\n            const moviesResponse = await axios.get<MovieModel[]>(Config.serverUrl + \"/api/movies\", {withCredentials: true});\r\n            const movies = moviesResponse.data;\r\n            this.setState({ movies });\r\n            //Getting user\r\n            const userResponse = await axios.get<UserModel>(Config.serverUrl + \"/auth/current_user\", {withCredentials: true})\r\n            const user = userResponse.data;\r\n            const userId = user.user_id;\r\n            this.setState({userId});\r\n            // Updating Redux\r\n            const action = { type: ActionType.getUser, payload: user};\r\n            store.dispatch(action);\r\n\r\n        } catch(err){\r\n            console.log(\"User is not logged in\");\r\n            // alert(\"Error:\" + err.message);\r\n        }\r\n    }\r\n\r\n    private setReview = async(args: any) => {\r\n        const reviewContent = args.target.value;\r\n        const review = {...this.state.review};\r\n        review.content = reviewContent;\r\n        this.setState({review});       \r\n    }\r\n\r\n    private setMovieId = async(args: ChangeEvent<HTMLSelectElement>) => {\r\n        const movieId = +args.target.value;\r\n        const review = {...this.state.review};\r\n        review.movieId = movieId;\r\n        review.dateAdded = new Date().toLocaleString().split(\",\")[0];\r\n        this.setState({review});\r\n    }\r\n\r\n    private addReview = async() => {\r\n        \r\n        const userId = this.state.userId;\r\n        const review = {...this.state.review};\r\n        review.userId = userId;\r\n        this.setState({ review });\r\n\r\n        if(!this.state.userId){\r\n            const errors = {...this.state.errors };\r\n            errors.nameError = \"Only authorized users can submit a review, Pls Log in..\";\r\n            this.setState({errors});\r\n        }\r\n        if(!this.state.review.movieId) {\r\n            const errors = {...this.state.errors };\r\n            errors.nameError = \"Selecting a movie is required!\";\r\n            this.setState({errors});\r\n            return\r\n        } else if (!this.state.review.content || this.state.review.content.split(\" \").length < 1){\r\n            const errors = {...this.state.errors };\r\n            errors.nameError = \"Review must contain at-least 1 word!\";\r\n            this.setState({errors});\r\n            return\r\n        }\r\n        try {\r\n            await axios.post<ReviewModel[]>(Config.serverUrl + \"/review/add-review\", review);\r\n            this.props.history.push(\"/review/\" + review.movieId);\r\n        } catch(err) {\r\n            console.log(\"Error: \" + err.message);\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount():void {\r\n        this.unsubscribeStore();\r\n    }\r\n\r\n    public render(){\r\n        return(\r\n            <div className=\"review-form\">\r\n                <h1>Tell us what you think</h1>\r\n                <select onChange={this.setMovieId} value={this.state.review.movieId} defaultValue={'DEFAULT'}>\r\n                    <option disabled value=\"DEFAULT\">Select movie...</option>\r\n                    {\r\n                        this.state.movies.map(m =>\r\n                            <option key={m.movieId} value={m.movieId}>{m.name}</option>\r\n                        )\r\n                    }\r\n                </select>\r\n                <span>{this.state.errors.nameError}</span>\r\n                <Form>\r\n                    <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\r\n                        <Form.Label></Form.Label>\r\n                        <Form.Control \r\n                        as=\"textarea\" \r\n                        rows={7} \r\n                        placeholder=\"Type your review here . . . \" \r\n                        type=\"text\" \r\n                        onChange={this.setReview}\r\n                        value={this.state.review.content || \"\"}\r\n                        />\r\n                    </Form.Group>\r\n                    <Button variant=\"light\" onClick={this.addReview}>Submit your review</Button>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport './footer.css';\r\n\r\nexport class Footer extends Component {\r\n\r\n    public render(){\r\n        return(\r\n            <footer className=\"web-footer\">\r\n                All Rights Reserved @Shirush\r\n            </footer>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport \"./layout.css\";\r\nimport { Movies } from \"../movies/movies\";\r\nimport { Switch } from \"react-router\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\nimport { Reviews } from \"../Reviews/reviews\";\r\nimport { Header } from \"../Header/Header\";\r\nimport { Insert } from '../Insert/insert';\r\nimport { Footer } from \"../Footer/footer\";\r\nimport { PageNotFound } from \"../page-not-found/page-not-found\";\r\n\r\nexport class Layout extends Component {\r\n\r\n    public render(){\r\n        return(\r\n            <div className=\"layout\">\r\n                <Header />\r\n                <BrowserRouter>\r\n                    <hr/>\r\n                    <main>\r\n                        <Switch>\r\n                            \r\n                            <Route path=\"/\" component={Movies} exact></Route>\r\n                            <Route path=\"/review/add-review\" component={Insert} exact></Route>\r\n                            <Route path=\"/review/:movieId\" component={Reviews} exact></Route>\r\n                            {/* <Route path =\"/*\" component={PageNotFound}></Route> */}\r\n                        \r\n                            {/* <Route path=\"**\" component={Movies} exact></Route> */}\r\n                        </Switch>\r\n                    </main>\r\n                </BrowserRouter>  \r\n                <Footer />              \r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Layout } from \"./components/layout/layout\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Layout />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nfunction printToConsole(){\n  let stylesHeader = [\n    'color: green',\n    'background: yellow',\n    'font-size: 30px',\n    'border: 4px solid red',\n    'text-shadow: 2px 2px black',\n    'padding: 10px',\n  ].join(';');\n  let stylesTopLine = [\n    'color: black',\n    'font-size: 20px',\n    'border-top: 4px solid red',\n    'border-right: 4px solid red',\n    'border-left: 4px solid red',\n    'padding: 10px',\n  ].join(';');\n  let stylesMiddleLines = [\n    'color: black',\n    'font-size: 20px',\n    'border-right: 4px solid red',\n    'border-left: 4px solid red',\n    'padding: 10px',\n  ].join(';');\n  let stylesBottomLine = [\n    'color: black',\n    'font-size: 20px',\n    'border-bottom: 4px solid red',\n    'border-right: 4px solid red',\n    'border-left: 4px solid red',\n    'padding: 10px',\n  ].join(';');\n  console.log('%cHello There', stylesHeader,);\n  console.log('%cIf you came all the way here you\\'re probably looking for something           ', stylesTopLine);\n  console.log('%cIf you do find any errors or even if you have any suggestions for improvement', stylesMiddleLines);\n  // console.log('%cor even a job opportunity                                                    ', stylesMiddleLine);\n  console.log('%cPlease let me know here - dshir27@gmail.com                                  ', stylesBottomLine);\n}\nprintToConsole();"],"sourceRoot":""}